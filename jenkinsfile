pipeline {
  agent any
  tools {
    // if you configured a NodeJS tool in Jenkins, put its name here; otherwise make sure node is installed on agent
    // nodejs "NodeJS_18"
  }
  environment {
    DEPLOY_USER = 'ubuntu'                           // remote user on deploy server
    DEPLOY_HOST = 'DEPLOY_SERVER_IP_OR_HOSTNAME'    // replace
    DEPLOY_DIR  = '/var/www/myapp'
    SSH_CRED_ID = 'deploy-ssh-key'                   // the Jenkins credential ID you created
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Install') {
      steps {
        sh 'node -v || true'
        sh 'npm ci'
      }
    }

    stage('Test') {
      steps {
        sh 'npm test'
      }
    }

    stage('Build') {
      steps {
        sh 'npm run build'
      }
    }

    stage('Archive') {
      steps {
        archiveArtifacts artifacts: 'dist/**', fingerprint: true
      }
    }

    stage('Deploy') {
      steps {
        // use ssh-agent to provide SSH key to scp/ssh
        sshagent (credentials: [env.SSH_CRED_ID]) {
          // copy files (remove old files then copy)
          sh """
            ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} 'mkdir -p ${DEPLOY_DIR} && rm -rf ${DEPLOY_DIR}/*'
            scp -r dist/* ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/
            ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'sudo systemctl reload nginx || true'
          """
        }
      }
    }
  }

  post {
    always {
      junit allowEmptyResults: true, testResults: 'test-results.xml'  // if you produce JUnit results
      cleanWs()
    }
  }
}

